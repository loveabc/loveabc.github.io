<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[docker学习笔记]]></title>
      <url>%2F2017%2F04%2F23%2Fdocker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[什么是docker?百度之docker的安装(ubuntu)apt-get install docker.io 安装linux自带的dockerapt-get install http://www.docker.com|sh 安装最新的docker docker version 查看安装的docker，如果既有client又有server，说明安装启动成功service start/stop/restart docker 启动/停止/重启docker服务docker pull [options] name [:tag] 从docker远程仓库拉取镜像ex：docker pull hello-world 从docker hub上拉取hello-world镜像docker images [options] [repository] [:tag] 查看本机已经存在的镜像 docker run [options] images [:tag] [command] [arg] 运行镜像docker ps 查询正在运行的docker镜像-d 后台运行ex：docker run -d nginx 在后台运行nginx服务docker stop image 停止指定的镜像docker stop 86f docker exec [options] imagesID bash 进入容器内部，在容器内部可执行命令ex：docker exec -it 86f67a bash 新开一个终端，进入容器内部，在容器内部可执行命令exit退出容器 docker网络docker的网络类型有brige（虚拟出自己的网卡），Host（和主机共用网卡），None（没有网络，容器不能和外界有任何网络联系）默认是bridge模式，使用bridge模式，需要端口映射，将主机的端口与镜像的端口进行映射，这样访问主机的指定端口就会访问镜像上的指定端口的服务 docker run -d -p 主机端口：容器端口 imageex：docker run -d -p 9999:80 hello-world 将容器的80端口映射到主机的9999端口docker run -d -P iamge 将容器的端口映射到随机端口上ex： docker -d -P hello-world 根据image id删除镜像docker rmi imageID 制作自己的镜像：dockerfile：描述怎么制作自己的镜像docker build：执行dockerfile中每一步描述的事情ex：dockerfile文件from hub.c.163.com/library/tomcat //指定需要继承的镜像MAINTAINER wenqaunzhang youth_fly@163.com //镜像所有者信息COPY springmvc.war /usr/local/tomcat/webapps //把需要放到镜像的文件复制到指定路径docker build -t springmvc:0.0.1 . //创建镜像 -t 镜像的名称和标签 dockerfile文件的路径，当前路径使用 .]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[diandian]]></title>
      <url>%2F2017%2F03%2F16%2Fdiandian%2F</url>
      <content type="text"><![CDATA[点点滴滴积累使用get提交数据到服务器,使用中不能带有#，原因：浏览器会把#后面的内容作为网页的锚点，导致传递到后台的数据缺失]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HotSpot VM垃圾回收问题]]></title>
      <url>%2F2017%2F03%2F13%2Fjvm%2F</url>
      <content type="text"><![CDATA[123456public void getRowData() &#123;User u=new User();//1System.out.println(u);//2Person p=new Person();// 3System.out.println(p);//4&#125; 如果程序执行到第三行的时候，JVM开始垃圾回收，问User对象u可能被回收吗？1234567public void getRowData() &#123;User u=new User();//1System.out.println(u);//2u=null;Person p=new Person();// 3System.out.println(p);//4&#125; 如果这样呢？给自己留的问题贴吧讨论http://tieba.baidu.com/p/5019938125]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[redis使用]]></title>
      <url>%2F2017%2F03%2F12%2Fredis%2F</url>
      <content type="text"><![CDATA[redis的下载安装(windows版)可以到redis的github上下载redis最新的发布版,github路径https://github.com/MSOpenTech/redis我的百度网盘中有Redis-x64-3.2.100.msi安装过程和普通软件的安装一样,记住redis的默认端口是6379,也可以在安装的过程中修改 redis的密码配置redis默认是没有密码的,这样会有很大的安全风险，所以需要配置密码，密码的配置也非常简单，在redis的安装目录下找到文件redis.windows-service.conf，搜索requirepass,#requirepass foobared将注释去掉，就开启了密码验证，密码就是后面的字符串foobared，然后将密码修改成我们自己的即可 redis服务的开启在cmd中进入redis的安装目录，然后执行命令开启redis服务：redis-server redis.windows.conf看到下图即成功开启了redis服务然后新开一个cmd，进入redis安装目录，执行命令redis-cli -h 127.0.0.1 -p 6379 -a your password该命令会给出提示redis 127.0.0.1:6379&gt;然后输入PING，如果输出PONG，说明连接成功，可对redis进行其他操作 redis中的数据结构redis是一个key-value内存数据库，所以所有的数据都是以key-value的形式存放在内存(或者磁盘)的 字符串的存取set key value //设置key对应的valueset name loveabc 设置name的值为loveabc可以使用get命令得到key对应的值get name 返回值是loveabc 哈希值的存取一个哈希值可对应多对键值对,可用于存放对象信息hmset key field1 value1 [field2 value2…]如存放一个有name,password与email的user对象hmset user name loveabc password loveabcpassword email loveabc@github.com使用hget key field 获取存储在指定键的哈希字段的值hget user email 返回loveabc@github.comhgetall key 获取key上的所有键值对hgetall user 返回nameloveabcpasswordloveabcpasswordemailloveabc@github.com 列表的存取lpush key value1 [value2 value3 …]存放多个值到列中lpush course java redis mysql存放java,redis,mysql到列表course中llen key 获取列表的长度llen course 返回3lrange key start end 从列表key中返回第start到第end的内容lrange course 0 2 返回mysql redis java(从返回结果来看，这更像是栈stack) 无需集合的存取无序集合里面的数据是无序且不重复的sadd key member1 [member2 member2 …] 添加多个元素到无需集合key中sadd member m1 m2 m1 存放m1,m2到无序集合member中smembers key 得到无序集合key中的所有元素smembers member 返回m1,m2(存放两个m1，单集合里面只有一个) java使用jedis包操作redis数据库首先引入Jedis所在的jar包12345&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt; java代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.imooc.redis;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import org.junit.Test;import redis.clients.jedis.Jedis;/* * 使用Jedis对redis数据库进行基本的操作 */public class RedisHandle &#123; @Test public void handleRedis() &#123; Jedis redis = null; try &#123; // 使用ip与port构造Jedis对象 redis = new Jedis(&quot;127.0.0.1&quot;, 6379); // 验证密码 redis.auth(&quot;foobaredpassword&quot;); //set string redis.set(&quot;email&quot;, &quot;loveabc@github.com&quot;); //set hash Map&lt;String,String&gt; map=new HashMap&lt;String,String&gt;(); map.put(&quot;age&quot;, &quot;25&quot;); map.put(&quot;gender&quot;, &quot;man&quot;); redis.hmset(&quot;user&quot;, map); //set list redis.lpush(&quot;course&quot;, &quot;python&quot;); //set set redis.sadd(&quot;member&quot;, &quot;m3&quot;); //get all keys Set&lt;String&gt; keys=redis.keys(&quot;*&quot;); for(String key:keys)&#123; &#125; //get String String name=redis.get(&quot;email&quot;); //get List List&lt;String&gt; courses=redis.lrange(&quot;course&quot;, 0, 5); for(String c:courses)&#123; &#125; //get list length Long sum=redis.llen(&quot;course&quot;); //get hash String password=redis.hget(&quot;user&quot;, &quot;password&quot;); Map&lt;String,String&gt; user=redis.hgetAll(&quot;user&quot;); Set&lt;Entry&lt;String,String&gt;&gt; allMap=user.entrySet(); for(Entry&lt;String,String&gt; entry:allMap)&#123; &#125; //get set Set&lt;String&gt; members=redis.smembers(&quot;member&quot;); for(String m:members)&#123; &#125; String type=redis.type(&quot;member&quot;); //get type System.out.println(type); &#125; finally &#123; //关闭连接,释放资源 if (redis != null) &#123; redis.close(); &#125; &#125; &#125;&#125; github路径:https://github.com/loveabc/redis-java.git 关于redis更多的操作命令与数据结构，可参考redis入门教程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo使用]]></title>
      <url>%2F2017%2F03%2F12%2Findex%2F</url>
      <content type="text"><![CDATA[123456781、为文章添加标签tags: - 标签1 - 标签22、为文章添加分类categories: - 分类1 - 分类2 如果文章过长，首页全部显示不美观，可以在文章中添加 &lt;!--more--&gt;手工截断文章， 则首页仅显示该标签的上面的内容， 只有点阅读全文，才显示文章全部内容]]></content>
    </entry>

    
  
  
</search>
